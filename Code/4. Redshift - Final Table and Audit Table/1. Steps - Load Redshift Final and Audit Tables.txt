================================================ FINAL TABLE ===============================================

use ecommerce_db;

create TABLE dev.customers (
customer_id VARCHAR(100) , 
customer_name VARCHAR(100) ,
customer_address VARCHAR(100)
);

insert into dev.customers values ('c100','abc','chennai');
insert into dev.customers values ('c101','def','pune');
insert into dev.customers values ('c102','ghi','bengaluru');
insert into dev.customers values ('c103','jkl','mumbai');
insert into dev.customers values ('c104','mno','delhi');
insert into dev.customers values ('c105','pqr','hyderabad');
insert into dev.customers values ('c106','stu','jaipur');
insert into dev.customers values ('c107','vwx','indore');

-- SELLER dimension table

create TABLE dev.sellers (
seller_id VARCHAR(100) , 
seller_name VARCHAR(100) ,
seller_address VARCHAR(100)
);

insert into dev.sellers values ('s100','aaa','gurgaon');
insert into dev.sellers values ('s101','bbb','gurgaon');
insert into dev.sellers values ('s102','ccc','gurgaon');
insert into dev.sellers values ('s103','ddd','noida');
insert into dev.sellers values ('s104','eee','noida');
insert into dev.sellers values ('s105','fff','noida');
insert into dev.sellers values ('s106','ggg','kolkata');
insert into dev.sellers values ('s107','hhh','kolkata');

commit;

----------

create table dev.orders_temp(
    order_key VARCHAR,
    order_id VARCHAR,
    customer_id VARCHAR,
    seller_id VARCHAR,
    product_code VARCHAR,
    product_name VARCHAR,
    product_price int,
    product_qty int,
    order_purchase_timestamp VARCHAR
);

create table dev.orders_final(
    order_key VARCHAR,
    order_id VARCHAR,
    customer_id VARCHAR,
    customer_name VARCHAR,
    customer_address VARCHAR,
    seller_id VARCHAR,
    seller_name VARCHAR,
    seller_address VARCHAR,
    product_code VARCHAR,
    product_name VARCHAR,
    product_price int,
    product_qty int,
    order_purchase_timestamp VARCHAR
);


CREATE OR REPLACE PROCEDURE dev.enriched_orders_sp()
AS $$
BEGIN

 RAISE INFO 'STARTING THE LOAD INTO dev.orders_final';

 INSERT INTO dev.orders_temp
 select order_key, order_id, customer_id, seller_id, product_code, product_name, product_price, product_qty, order_purchase_timestamp
 from dev.orders stg
 where stg.order_key not in (select distinct order_key from dev.orders_final);

 INSERT INTO dev.orders_final
 select order_key, order_id, a.customer_id, customer_name, customer_address, a.seller_id, seller_name, seller_address, product_code, product_name, product_price, product_qty, order_purchase_timestamp from dev.orders_temp a left outer join dev.customers b
 on a.customer_id = b.customer_id
 left outer join dev.sellers c
 on a.seller_id = c.seller_id;

 COMMIT;
 
 TRUNCATE TABLE dev.orders_temp;

 RAISE INFO 'COMPLETED THE LOAD INTO dev.orders_final';

EXCEPTION 
 
 WHEN OTHERS THEN
 RAISE EXCEPTION 'LOAD INTO dev.orders_final failed';
 
END;
$$ LANGUAGE plpgsql;


================================================ AUDIT TABLE ===============================================


create table dev.orders_audit(
    order_key VARCHAR,
    order_id VARCHAR,
    customer_id VARCHAR,
    customer_name VARCHAR,
    customer_address VARCHAR,
    seller_id VARCHAR,
    seller_name VARCHAR,
    seller_address VARCHAR,
    product_code VARCHAR,
    product_name VARCHAR,
    product_price int,
    product_qty int,
    order_purchase_timestamp VARCHAR,
    status VARCHAR
);

Note: The "status" column will be updated once action is taken.

Note: Since we need to compare S3 data with Redshift data, we create an external schema on the glue data catalog in Redshift.

create external schema s3_staging_schema
from data catalog   
database 'ecommerce-database'
iam_role 'arn:aws:iam::100163808729:role/MyRedshiftRoleWithAdminAccess'
;


CREATE OR REPLACE PROCEDURE dev.audit_orders_sp()
AS $$
BEGIN

 RAISE INFO 'STARTING THE LOAD INTO dev.orders_audit';

INSERT into dev.orders_audit
select a.*, 'NEW' from
(
select order_key, order_id, customer_id, seller_id, product_code, product_name, product_price, product_qty, order_purchase_timestamp
from s3_staging_schema.new_orders_staging_area 
) a
full outer JOIN
(
select order_key, order_id, customer_id, seller_id, product_code, product_name, product_price, product_qty, order_purchase_timestamp 
from dev.orders_final 
) b
on a.order_key = b.order_key
where a.order_id <> b.order_id
or a.customer_id <> b.customer_id
or a.seller_id <> b.seller_id
or a.product_code <> b.product_code
or a.product_name <> b.product_name
or a.product_price <> b.product_price
or a.product_qty <> b.product_qty
or a.order_purchase_timestamp <> b.order_purchase_timestamp;

commit;

RAISE INFO 'COMPLETED THE LOAD INTO dev.ordersaudit';

EXCEPTION 
 
 WHEN OTHERS THEN
 RAISE EXCEPTION 'LOAD INTO dev.orders_audit failed';
 
END;
$$ LANGUAGE plpgsql;
